{"version":3,"sources":["assets/myMap.jpg","assets/hellboy.glb","assets/flag.glb","mindar-viewer.js","App.js","reportWebVitals.js","index.js"],"names":["ModeViewAR","props","timer","handleClick","useCallback","console","log","sceneRef","useRef","newdX","newdY","newdZ","olddX","olddY","olddZ","useState","x1","setX1","y1","setY1","z1","setZ1","x2","setX2","y2","setY2","z2","setZ2","xx1","useEffect","sceneEl","current","arSystem","systems","addEventListener","start","stop","clearInterval","setInterval","Math","random","person","data","map","record","PI","pos","lng","toFixed","lat","ref","mindar-image","color-space","embedded","renderer","vr-mode-ui","device-orientation-permission-ui","id","src","hellboy","flag","position","look-controls","mindar-image-target","height","width","rotation","scale","color","line","line__2","line__3","line__4","line__5","line__6","line__7","line__8","onClick","animation","App","started","setStarted","x","setX","y","setY","z","setZ","oldX","setOldX","oldY","setOldY","oldZ","setOldZ","className","href","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.02d331b6.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/myMap.e78dc06d.jpg\";","export default __webpack_public_path__ + \"static/media/hellboy.fbeeb597.glb\";","export default __webpack_public_path__ + \"static/media/flag.629530c6.glb\";","import React, { useEffect, useState, useRef, useCallback } from \"react\";\r\nimport map from \"./assets/myMap.jpg\";\r\nimport hellboy from \"./assets/hellboy.glb\";\r\nimport flag from \"./assets/flag.glb\";\r\nimport person from './person.json';\r\n\r\n\r\n//cette fontionnalité va déclencher quand on active le mode AR et ça met à jour chaque 5s avec de nouvelles données (3 axes X,Y,Z)\r\nconst ModeViewAR = (props) => {\r\n  const handleClick = useCallback(() => {\r\n    console.log('object clicked!');\r\n  },[]);\r\n\r\n\r\n  const sceneRef = useRef(null);\r\n  //6 properties old X,Y,Z and new X,Y,Z\r\n  const { newdX, newdY, newdZ, olddX, olddY, olddZ } = props;\r\n\r\n  const [x1, setX1] = useState(0);\r\n  const [y1, setY1] = useState(0);\r\n  const [z1, setZ1] = useState(0);\r\n\r\n  const [x2, setX2] = useState(0);\r\n  const [y2, setY2] = useState(0);\r\n  const [z2, setZ2] = useState(0);\r\n\r\n  var height = 2;\r\n  var width = 3 ;\r\n\r\n  var xx1 = -1.5;\r\n  var yy1;\r\n  var zz1;\r\n\r\n  let timer;\r\n\r\n  //cette fonction avec 3 pamamètres: newdX, newdY, newdZ\r\n  useEffect(() => {\r\n    //le bouton switch entre 2 modes: AR et Map\r\n    const sceneEl = sceneRef.current;\r\n    const arSystem = sceneEl.systems[\"mindar-image-system\"];\r\n\r\n    setX1(props.olddX);\r\n    setY1(props.olddY);\r\n    setZ1(props.olddZ);\r\n\r\n    setX2(props.newdX);\r\n    setY2(props.newdY);\r\n    setZ2(props.newdZ);\r\n\r\n    sceneEl.addEventListener(\r\n      \"renderstart\",\r\n      () => {\r\n        arSystem.start();\r\n      },\r\n      [arSystem]\r\n    );\r\n\r\n\r\n    return () => {\r\n      arSystem.stop();\r\n      clearInterval(timer);\r\n    };\r\n  }, []);\r\n  //ça fonctionne encore quand on coupe la caméra\r\n  // var litNumber = [{x:-1.5, y:0,z:0.1},\r\n  //   {x:-1.5, y:0,z:0.1},\r\n  //   {x:-1.25, y:-.015,z:0.1},\r\n  //   {x:-1.05, y:-0.35,z:0.1},\r\n  //   {x:-0.05, y:-0.75,z:0.1},\r\n  //   {x:0.15, y:-0.75,z:0.1},\r\n  //   {x:0.25, y:0.75,z:0.1},\r\n  //   {x:0.35, y:0.875,z:0.1},\r\n  //   {x:1.0, y:0.675,z:0.1}\r\n  // ];\r\n  useEffect(() => {\r\n    let incrementTime = 5000;\r\n    timer = setInterval(() => {\r\n      var min = 0;\r\n      var max = 1;\r\n      var rand = min + Math.random() * (max - min);\r\n      var xx2 = -1.5;\r\n      //mettre à jour les values en utilisant state\r\n     \r\n      setX1(xx1);\r\n      // setY1(y1 + 0.01);\r\n      // setZ1(z1 + 0.01);\r\n      xx1 = xx1 + 0.1;\r\n      setX2(xx1);\r\n      // setY2(y1 + 0.02);\r\n      // setZ2(z1 + 0.02);\r\n\r\n      // console.log(`after 5s x1 ${x1} ${y1} ${z1} ${rand}`);\r\n      // console.log(`after 5s x2 ${x2} ${y1} ${z1}`);\r\n\r\n      //garder des valeurs anciennes\r\n\r\n      //mettre à jour les values en utilisant state\r\n    }, incrementTime);\r\n   \r\n    // return () => clearInterval(timer);\r\n\r\n  }, [x1, y1, z1, x2, y2, z2]);\r\n\r\n  var speed = 5000;\r\n\r\n  {person.data.map((record) => {\r\n    {\r\n      return (\r\n        console.log(`${((Math.PI*record.pos.lng / 180) *3/2 +1 ).toFixed(3)} ${((Math.PI*record.pos.lat /180) * 2/2 + 1).toFixed(3)} 0.5`)\r\n      \r\n      );\r\n    }\r\n  })}\r\n\r\n  return (\r\n    \r\n    <a-scene\r\n      ref={sceneRef}\r\n      mindar-image=\"imageTargetSrc: map.mind; autoStart: false; uiLoading: no; uiError: no; uiScanning: no;\"\r\n      color-space=\"sRGB\"\r\n      embedded\r\n      renderer=\"colorManagement: true, physicallyCorrectLights\"\r\n      vr-mode-ui=\"enabled: false\"\r\n      device-orientation-permission-ui=\"enabled: true\"\r\n    >\r\n      <a-assets>\r\n        <img id=\"card\" src={map} />\r\n\r\n        <a-asset-item id=\"avatarModel\" src={hellboy}></a-asset-item>\r\n        <a-asset-item id=\"flagModel\" src={flag}></a-asset-item>\r\n      </a-assets>\r\n      <a-camera position=\"0 0 0\" look-controls=\"enabled: false\"></a-camera>\r\n\r\n      {/* une scène pour dessiner les points intérêts sur la carte  */}\r\n\r\n      {/* une scène pour afficher les étudiant */}\r\n      <a-entity mindar-image-target=\"targetIndex: 0\">\r\n        <a-plane\r\n          src=\"#card\"\r\n          position=\"0 0 0\"\r\n          height=\"2\" //y\r\n          width=\"3\" //x\r\n          rotation=\"0 0 0\"\r\n        ></a-plane>\r\n\r\n        {/* afficher les flags pour déterminer des points intérets */}\r\n        <a-gltf-model\r\n          rotation=\"0 270 0 \"\r\n          position=\"-1.5 0 0.1\"\r\n          scale=\"0.3 0.3 0.3\"\r\n          src=\"#flagModel\"\r\n          color=\"red\"\r\n        ></a-gltf-model>\r\n\r\n        <a-gltf-model\r\n          rotation=\"0 270 0 \"\r\n          position=\"0.2 -0.75 0.1\"\r\n          scale=\"0.3 0.3 0.3\"\r\n          src=\"#flagModel\"\r\n        ></a-gltf-model>\r\n\r\n        <a-gltf-model\r\n          rotation=\"0 270 0 \"\r\n          position=\"1.5 0.75 0.1\"\r\n          scale=\"0.3 0.3 0.3\"\r\n          src=\"#flagModel\"\r\n        ></a-gltf-model>\r\n\r\n        {/* Pour afficher le trajet à réaliser par des  */}\r\n        <a-entity\r\n          line=\"start: -1.5 0 0.1; end: -1.25 -0.15 0.1; color: green;\"\r\n          line__2=\"start: -1.25 -0.15 0.1; end: -1.05 -0.35 0.1; color: green\"\r\n          line__3=\"start: -1.05 -0.35 0.1; end: -0.05 -0.75 0.1; color: green\"\r\n          line__4=\"start: -0.05 -0.75 0.1; end: 0.15 -0.75 0.1; color: green\"\r\n          line__5=\"start:  0.15 -0.75 0.1; end: 0.25 0.75 0.1; color: green\"\r\n          line__6=\"start: 0.25 0.75 0.1; end: 0.35 0.875 0.1; color: green\"\r\n          line__7=\"start: 0.35 0.875 0.1; end: 1.0 0.675 0.1; color: green\"\r\n          line__8=\"start: 1.0 0.675 0.1; end: 1.5 0.675 0.1; color: green\"\r\n        ></a-entity>\r\n\r\n        <a-entity\r\n          line=\"start: -1.5 0 0.1; end: -1.25 0.25 0.1; color: red; linewidth: 100\"\r\n          line__2=\"start: -1.25 0.25 0.1; end: -0.85 0.95 0.1; color: red; linewidth: 100\"\r\n          line__3=\"start:  -0.85 0.95 0.1; end: 0 0.95 0.1; color: red; linewidth: 100\"\r\n          line__4=\"start:  0 0.95 0.1; end: 1.5 0.65 0.1; color: red; linewidth: 100\"\r\n          line__5=\"start:  1.5 0.65 0.1; end: 1.5 -0.45 0.1; color: red; linewidth: 100\"\r\n          line__6=\"start: 1.5 -0.45 0.1; end: 0 -0.85 0.1; color: red; linewidth: 100\"\r\n          line__7=\"start:0 -0.85 0.1; end: -1.0 -0.85 0.1; color: red; linewidth: 100\"\r\n          line__8=\"start: -1.0 -0.85 0.1; end: -1.5 0 0.1; color: red; linewidth: 100\"\r\n        ></a-entity>\r\n\r\n        {/* perso 1 */}\r\n        {/* <a-gltf-model\r\n          rotation=\"0 0 0 \"\r\n          position=\"-1 0 0.5\"\r\n          scale=\"0.3 0.3 0.3\"\r\n          src=\"#avatarModel\"\r\n          animation={`property: position; from: ${x1} ${y1} ${z1} ; to: ${x2} ${y2} ${z2};dur:${speed}; easing: easeInOutQuad; loop: true; dir: alternate`}\r\n        ></a-gltf-model> */}\r\n\r\n        {person.data.map((record) => {\r\n          {\r\n            return (\r\n              <a-gltf-model\r\n                rotation=\"0 0 0\"\r\n                position={`${((Math.PI*record.pos.lng / 180) *3/2).toFixed(3)} ${((Math.PI*record.pos.lat / 180) * 2/2).toFixed(3)} 0.5`}\r\n                scale=\"0.1 0.1 0.1\"\r\n                src=\"#avatarModel\"\r\n                onClick={handleClick}\r\n                // animation={`property: position; from: ${x1} ${y1} ${z1} ; to: ${x2} ${y2} ${z2};dur:${speed}; easing: easeInOutQuad; loop: true; dir: alternate`}\r\n                animation={`property: position; from: ${((Math.PI*record.pos.lng / 180) *3/2).toFixed(3)}  ${((Math.PI*record.pos.lat / 180) * 2/2).toFixed(3)} 0.5 ; to: ${((Math.PI*record.pos.lng / 180) *3/2 +1).toFixed(3)}  ${((Math.PI*record.pos.lat / 180) * 2/2 +1 ).toFixed(3)} 0.5;dur:${speed}; easing: easeInOutQuad; loop: true; dir: alternate`}\r\n              ></a-gltf-model>\r\n            );\r\n          }\r\n        })}\r\n\r\n        {/* perso 2 */}\r\n        {/* <a-gltf-model\r\n          rotation=\"0 0 0 \"\r\n          position=\"-1 0 0.1\"\r\n          scale=\"0.2 0.2 0.2\"\r\n          src=\"#avatarModel\"\r\n          animation={`property: position; from: ${x1 + 0.1} ${y1 + 0.01} ${\r\n            z1 + 0.01\r\n          } ; to: ${x2 + 0.01} ${y2 + 0.01} ${\r\n            z2 + 0.01\r\n          };dur:4000; easing: easeInOutQuad; loop: true; dir: alternate`}\r\n          // animation={`property: position; from: -1 0 0.5; to: 0 1.25 0.95;dur:4000; easing: easeInOutQuad; loop: true; dir: alternate`}\r\n        ></a-gltf-model> */}\r\n      </a-entity>\r\n    </a-scene>\r\n  );\r\n}; \r\n\r\nexport default ModeViewAR;\r\n","import React, { useState } from 'react';\nimport 'mind-ar/dist/mindar-image.prod.js';\nimport 'aframe';\nimport 'mind-ar/dist/mindar-image-aframe.prod.js';\nimport './App.css';\nimport ModeViewAR from \"./mindar-viewer\";\n\n\nfunction App() {\n  const [started, setStarted] = useState(false);\n  const [x, setX] = useState(1);\n  const [y, setY] = useState(1);\n  const [z, setZ] = useState(1);\n  const [oldX, setOldX] = useState(0);\n  const [oldY, setOldY] = useState(0);\n  const [oldZ, setOldZ] = useState(0);\n\n\n  //If any input changes reset\n  const basicReset = () => {\n    setStarted(true);\n   \n  };\n\n  //fonction pour mettre à jour les valeurs\n  const changeValue = () => {\n    // const { x1 } = old1.target.value;\n    // const { y1 } = old2.target.value;\n    // const { z1 } = old3.target.value;\n    // const { x2 } = new1.target.value;\n    // const { y2 } = new2.target.value;\n    // const { z2 } = new3.target.value;\n    // for (var i = 0; i < 10; i++) {\n    //   setOldX(i);\n    //   setOldY(i);\n    //   setOldZ(i);\n    //   i++;\n    //   setX(i++);\n    //   setY(i++);\n    //   setZ(i++);\n\n    //   console.log(`${oldX} ${oldY} ${oldZ} ; to: ${x} ${y} ${z};`);\n    //   //\n    // }\n    setOldX(-1.5);\n    setOldY(0);\n    setOldZ(0);\n    setX(-1.4);\n    setY(0);\n    setZ(0);\n   \n    basicReset();\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>\n        Example React component with{\" \"}\n        <a href=\"https://github.com/hiukim/mind-ar-js\" target=\"_blank\">\n          MindAR\n        </a>\n      </h1>\n      \n      <div>\n        {/* {!started && <button onClick={() => {setStarted(true)}}>Start</button>} */}\n        {!started && <button onClick={changeValue}>Start</button>}\n        {started && (\n          <button\n            onClick={() => {\n              setStarted(false);\n             \n            }}\n          >\n            Stop\n          </button>\n        )}\n      </div>\n\n      {started && (\n        <div className=\"container\">\n          {/* <MindARViewer/> */}\n          <ModeViewAR\n            newdX={x}\n            newdY={y}\n            newdZ={z}\n            olddX={oldX}\n            olddY={oldY}\n            olddZ={oldZ}\n         \n           \n          />\n          <video></video>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n//react 18\n// const root = ReactDOM.createRoot(document.getElementById(\"root\"));\n// root.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>\n// );\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}